In the image and likeness in separate files, create three singleton classes in separate files - Sun, Moon, Earth.
Implement the Planet interface in the Sun, Moon, Earth classes.
In the static block of the Solution class, call the readKeyFromConsoleAndInitPlanet() method.
Implement the functionality of the readKeyFromConsoleAndInitPlanet() method:
to do this, read one parameter of the String type from the console.
if it is equal to one of the Planet interface constants, create the appropriate object and
assign it to Planet thePlanet, otherwise Planet thePlanet is reset.



Найти пример паттерна Singleton с ленивой реализацией (lazy initialization).
По образу и подобию в отдельных файлах создать в отдельных файлах три класса синглтона — Sun, Moon, Earth.
Реализовать интерфейс Planet в классах Sun, Moon, Earth.
В статическом блоке класса Solution вызвать метод readKeyFromConsoleAndInitPlanet().
Реализовать функционал метода readKeyFromConsoleAndInitPlanet():
для этого считай с консоли один параметр типа String.
если он равен одной из констант интерфейса Planet, создай соответствующий объект и
присвой его Planet thePlanet, иначе — обнули Planet thePlanet.


Вывод: pattern Singletone используется для:
Нужно создать класс, у которого будет только ОДИН объект.
Это значит, что сколько бы раз к нему не обращались,
возвращаться будет один и тот же объект, который был создан первый раз.


